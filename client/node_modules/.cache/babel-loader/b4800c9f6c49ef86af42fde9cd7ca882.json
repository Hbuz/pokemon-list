{"ast":null,"code":"import request from \"superagent\";\nexport const USER_LOGIN_SUCCESS = \"USER_LOGIN_SUCCESS\";\nexport const USER_LOGIN_FAILED = \"USER_LOGIN_FAILED\";\nexport const USER_SIGNUP_SUCCESS = \"USER_SIGNUP_SUCCESS\";\nexport const USER_SIGNUP_FAILED = \"USER_SIGNUP_FAILED\";\nexport const CLEAN_SIGNUP = \"CLEAN_SIGNUP\";\nexport const USER_LOGOUT = \"USER_LOGOUT\";\nexport const REMOVE_ERROR = \"REMOVE_ERROR\"; //const baseUrl = process.env.REACT_APP_API_URL || \"http://localhost:4001\";\n\nconst userLoginSuccess = user => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: user\n});\n\nconst userLoginFailed = error => ({\n  type: USER_LOGIN_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nconst userSignupSuccess = user => ({\n  type: USER_SIGNUP_SUCCESS,\n  payload: user\n});\n\nconst userSignupFailed = error => ({\n  type: USER_SIGNUP_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nexport const clean = () => ({\n  type: CLEAN_SIGNUP\n});\nexport const logout = () => ({\n  type: USER_LOGOUT\n});\nexport const removePrevErrors = () => ({\n  type: REMOVE_ERROR\n});\nexport const login = (username, password) => dispatch => request.post(\"\".concat(baseUrl, \"/logins\")).send({\n  username,\n  password\n}).then(result => {\n  dispatch(userLoginSuccess(result.body));\n  dispatch(removePrevErrors());\n}).catch(err => {\n  if (err.status === 400) {\n    dispatch(userLoginFailed(err.response.body.message));\n  } else {\n    console.error(err);\n  }\n});\nexport const signup = (username, password) => dispatch => request.post(\"\".concat(baseUrl, \"/signup\")).send({\n  username,\n  password\n}).then(result => {\n  dispatch(userSignupSuccess(result.body));\n  dispatch(removePrevErrors());\n}).catch(err => {\n  if (err.status === 400) {\n    dispatch(userSignupFailed(err.response.body.message));\n  } else {\n    console.error(err);\n  }\n});","map":{"version":3,"sources":["/home/marco/Documents/Job/Interviews/ProctorExam/Pokemon-list/client/src/actions/auth.js"],"names":["request","USER_LOGIN_SUCCESS","USER_LOGIN_FAILED","USER_SIGNUP_SUCCESS","USER_SIGNUP_FAILED","CLEAN_SIGNUP","USER_LOGOUT","REMOVE_ERROR","userLoginSuccess","user","type","payload","userLoginFailed","error","userSignupSuccess","userSignupFailed","clean","logout","removePrevErrors","login","username","password","dispatch","post","baseUrl","send","then","result","body","catch","err","status","response","message","console","signup"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,YAAY,GAAG,cAArB,C,CAEP;;AAEA,MAAMC,gBAAgB,GAAGC,IAAI,KAAK;AAChCC,EAAAA,IAAI,EAAET,kBAD0B;AAEhCU,EAAAA,OAAO,EAAEF;AAFuB,CAAL,CAA7B;;AAKA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChCH,EAAAA,IAAI,EAAER,iBAD0B;AAEhCS,EAAAA,OAAO,EAAEE,KAAK,IAAI;AAFc,CAAL,CAA7B;;AAKA,MAAMC,iBAAiB,GAAGL,IAAI,KAAK;AACjCC,EAAAA,IAAI,EAAEP,mBAD2B;AAEjCQ,EAAAA,OAAO,EAAEF;AAFwB,CAAL,CAA9B;;AAKA,MAAMM,gBAAgB,GAAGF,KAAK,KAAK;AACjCH,EAAAA,IAAI,EAAEN,kBAD2B;AAEjCO,EAAAA,OAAO,EAAEE,KAAK,IAAI;AAFe,CAAL,CAA9B;;AAKA,OAAO,MAAMG,KAAK,GAAG,OAAO;AAC1BN,EAAAA,IAAI,EAAEL;AADoB,CAAP,CAAd;AAKP,OAAO,MAAMY,MAAM,GAAG,OAAO;AAC3BP,EAAAA,IAAI,EAAEJ;AADqB,CAAP,CAAf;AAKP,OAAO,MAAMY,gBAAgB,GAAG,OAAO;AACrCR,EAAAA,IAAI,EAAEH;AAD+B,CAAP,CAAzB;AAKP,OAAO,MAAMY,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwBC,QAAQ,IACnDtB,OAAO,CACJuB,IADH,WACWC,OADX,cAEGC,IAFH,CAEQ;AAAEL,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAFR,EAGGK,IAHH,CAGQC,MAAM,IAAI;AACdL,EAAAA,QAAQ,CAACd,gBAAgB,CAACmB,MAAM,CAACC,IAAR,CAAjB,CAAR;AACAN,EAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACD,CANH,EAOGW,KAPH,CAOSC,GAAG,IAAI;AACZ,MAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,IAAAA,QAAQ,CAACV,eAAe,CAACkB,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,OAAnB,CAAhB,CAAR;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,CAACrB,KAAR,CAAciB,GAAd;AACD;AACF,CAbH,CADK;AAgBP,OAAO,MAAMK,MAAM,GAAG,CAACf,QAAD,EAAWC,QAAX,KAAwBC,QAAQ,IACpDtB,OAAO,CACJuB,IADH,WACWC,OADX,cAEGC,IAFH,CAEQ;AAAEL,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAFR,EAGGK,IAHH,CAGQC,MAAM,IAAI;AACdL,EAAAA,QAAQ,CAACR,iBAAiB,CAACa,MAAM,CAACC,IAAR,CAAlB,CAAR;AACAN,EAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACD,CANH,EAOGW,KAPH,CAOSC,GAAG,IAAI;AACZ,MAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,IAAAA,QAAQ,CAACP,gBAAgB,CAACe,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,OAAnB,CAAjB,CAAR;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,CAACrB,KAAR,CAAciB,GAAd;AACD;AACF,CAbH,CADK","sourcesContent":["import request from \"superagent\";\n\nexport const USER_LOGIN_SUCCESS = \"USER_LOGIN_SUCCESS\";\nexport const USER_LOGIN_FAILED = \"USER_LOGIN_FAILED\";\n\nexport const USER_SIGNUP_SUCCESS = \"USER_SIGNUP_SUCCESS\";\nexport const USER_SIGNUP_FAILED = \"USER_SIGNUP_FAILED\";\nexport const CLEAN_SIGNUP = \"CLEAN_SIGNUP\";\n\nexport const USER_LOGOUT = \"USER_LOGOUT\";\n\nexport const REMOVE_ERROR = \"REMOVE_ERROR\";\n\n//const baseUrl = process.env.REACT_APP_API_URL || \"http://localhost:4001\";\n\nconst userLoginSuccess = user => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: user\n});\n\nconst userLoginFailed = error => ({\n  type: USER_LOGIN_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nconst userSignupSuccess = user => ({\n  type: USER_SIGNUP_SUCCESS,\n  payload: user\n});\n\nconst userSignupFailed = error => ({\n  type: USER_SIGNUP_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nexport const clean = () => ({\n  type: CLEAN_SIGNUP,\n});\n\n\nexport const logout = () => ({\n  type: USER_LOGOUT\n});\n\n\nexport const removePrevErrors = () => ({\n  type: REMOVE_ERROR\n})\n\n\nexport const login = (username, password) => dispatch =>\n  request\n    .post(`${baseUrl}/logins`)\n    .send({ username, password })\n    .then(result => {\n      dispatch(userLoginSuccess(result.body))\n      dispatch(removePrevErrors())\n    })\n    .catch(err => {\n      if (err.status === 400) {\n        dispatch(userLoginFailed(err.response.body.message));\n      } else {\n        console.error(err);\n      }\n    });\n\nexport const signup = (username, password) => dispatch =>\n  request\n    .post(`${baseUrl}/signup`)\n    .send({ username, password })\n    .then(result => {\n      dispatch(userSignupSuccess(result.body))\n      dispatch(removePrevErrors());\n    })\n    .catch(err => {\n      if (err.status === 400) {\n        dispatch(userSignupFailed(err.response.body.message));\n      } else {\n        console.error(err);\n      }\n    });\n"]},"metadata":{},"sourceType":"module"}