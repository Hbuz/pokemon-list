{"ast":null,"code":"import request from \"superagent\";\nexport const USER_LOGIN_SUCCESS = \"USER_LOGIN_SUCCESS\";\nexport const USER_LOGIN_FAILED = \"USER_LOGIN_FAILED\";\nexport const USER_SIGNUP_SUCCESS = \"USER_SIGNUP_SUCCESS\";\nexport const ADD_USER = \"ADD_USER\";\nexport const USER_SIGNUP_FAILED = \"USER_SIGNUP_FAILED\";\nexport const USER_LOGOUT = \"USER_LOGOUT\";\nconst baseUrl = process.env.REACT_APP_API_URL || \"http://localhost:4001\";\n\nconst userLoginSuccess = userJwt => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: userJwt\n});\n\nconst userLoginFailed = error => ({\n  type: USER_LOGIN_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nconst userSignupSuccess = entity => ({\n  type: ADD_USER,\n  payload: entity\n});\n\nconst userSignupFailed = error => ({\n  type: USER_SIGNUP_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nexport const logout = () => ({\n  type: USER_LOGOUT\n});\nexport const login = (username, password) => dispatch => request.post(\"\".concat(baseUrl, \"/logins\")).send({\n  username,\n  password\n}).then(result => {\n  console.log(JSON.stringify(result));\n  dispatch(userLoginSuccess(result.body));\n}).catch(err => {\n  if (err.status === 400) {\n    dispatch(userLoginFailed(err.response.body.message));\n  } else {\n    console.error(err);\n  }\n});\nexport const signup = (username, password) => dispatch => request.post(\"\".concat(baseUrl, \"/users\")).send({\n  username,\n  password\n}).then(result => dispatch(userSignupSuccess(result.body))).catch(err => {\n  if (err.status === 400) {\n    dispatch(userSignupFailed(err.response.body.message));\n  } else {\n    console.error(err);\n  }\n});","map":{"version":3,"sources":["/home/marco/Documents/Job/Interviews/ProctorExam/Pokemon-list/client/src/actions/auth.js"],"names":["request","USER_LOGIN_SUCCESS","USER_LOGIN_FAILED","USER_SIGNUP_SUCCESS","ADD_USER","USER_SIGNUP_FAILED","USER_LOGOUT","baseUrl","process","env","REACT_APP_API_URL","userLoginSuccess","userJwt","type","payload","userLoginFailed","error","userSignupSuccess","entity","userSignupFailed","logout","login","username","password","dispatch","post","send","then","result","console","log","JSON","stringify","body","catch","err","status","response","message","signup"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,IAAiC,uBAAjD;;AAEA,MAAMC,gBAAgB,GAAGC,OAAO,KAAK;AACnCC,EAAAA,IAAI,EAAEZ,kBAD6B;AAEnCa,EAAAA,OAAO,EAAEF;AAF0B,CAAL,CAAhC;;AAKA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChCH,EAAAA,IAAI,EAAEX,iBAD0B;AAEhCY,EAAAA,OAAO,EAAEE,KAAK,IAAI;AAFc,CAAL,CAA7B;;AAKA,MAAMC,iBAAiB,GAAGC,MAAM,KAAK;AACnCL,EAAAA,IAAI,EAAET,QAD6B;AAEnCU,EAAAA,OAAO,EAAEI;AAF0B,CAAL,CAAhC;;AAKA,MAAMC,gBAAgB,GAAGH,KAAK,KAAK;AACjCH,EAAAA,IAAI,EAAER,kBAD2B;AAEjCS,EAAAA,OAAO,EAAEE,KAAK,IAAI;AAFe,CAAL,CAA9B;;AAKA,OAAO,MAAMI,MAAM,GAAG,OAAO;AAC3BP,EAAAA,IAAI,EAAEP;AADqB,CAAP,CAAf;AAIP,OAAO,MAAMe,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwBC,QAAQ,IACnDxB,OAAO,CACJyB,IADH,WACWlB,OADX,cAEGmB,IAFH,CAEQ;AAAEJ,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAFR,EAGGI,IAHH,CAGQC,MAAM,IAAI;AACdC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAZ;AACAJ,EAAAA,QAAQ,CAACb,gBAAgB,CAACiB,MAAM,CAACK,IAAR,CAAjB,CAAR;AACD,CANH,EAOGC,KAPH,CAOSC,GAAG,IAAI;AACZ,MAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBZ,IAAAA,QAAQ,CAACT,eAAe,CAACoB,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,OAAnB,CAAhB,CAAR;AACD,GAFD,MAEO;AACLT,IAAAA,OAAO,CAACb,KAAR,CAAcmB,GAAd;AACD;AACF,CAbH,CADK;AAgBP,OAAO,MAAMI,MAAM,GAAG,CAACjB,QAAD,EAAWC,QAAX,KAAwBC,QAAQ,IACpDxB,OAAO,CACJyB,IADH,WACWlB,OADX,aAEGmB,IAFH,CAEQ;AAAEJ,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAFR,EAGGI,IAHH,CAGQC,MAAM,IAAIJ,QAAQ,CAACP,iBAAiB,CAACW,MAAM,CAACK,IAAR,CAAlB,CAH1B,EAIGC,KAJH,CAISC,GAAG,IAAI;AACZ,MAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBZ,IAAAA,QAAQ,CAACL,gBAAgB,CAACgB,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,OAAnB,CAAjB,CAAR;AACD,GAFD,MAEO;AACLT,IAAAA,OAAO,CAACb,KAAR,CAAcmB,GAAd;AACD;AACF,CAVH,CADK","sourcesContent":["import request from \"superagent\";\n\nexport const USER_LOGIN_SUCCESS = \"USER_LOGIN_SUCCESS\";\nexport const USER_LOGIN_FAILED = \"USER_LOGIN_FAILED\";\n\nexport const USER_SIGNUP_SUCCESS = \"USER_SIGNUP_SUCCESS\";\nexport const ADD_USER = \"ADD_USER\";\nexport const USER_SIGNUP_FAILED = \"USER_SIGNUP_FAILED\";\n\nexport const USER_LOGOUT = \"USER_LOGOUT\";\n\nconst baseUrl = process.env.REACT_APP_API_URL || \"http://localhost:4001\";\n\nconst userLoginSuccess = userJwt => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: userJwt\n});\n\nconst userLoginFailed = error => ({\n  type: USER_LOGIN_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nconst userSignupSuccess = entity => ({\n  type: ADD_USER,\n  payload: entity\n});\n\nconst userSignupFailed = error => ({\n  type: USER_SIGNUP_FAILED,\n  payload: error || \"Unknown error\"\n});\n\nexport const logout = () => ({\n  type: USER_LOGOUT\n});\n\nexport const login = (username, password) => dispatch =>\n  request\n    .post(`${baseUrl}/logins`)\n    .send({ username, password })\n    .then(result => {\n      console.log(JSON.stringify(result))\n      dispatch(userLoginSuccess(result.body))\n    })\n    .catch(err => {\n      if (err.status === 400) {\n        dispatch(userLoginFailed(err.response.body.message));\n      } else {\n        console.error(err);\n      }\n    });\n\nexport const signup = (username, password) => dispatch =>\n  request\n    .post(`${baseUrl}/users`)\n    .send({ username, password })\n    .then(result => dispatch(userSignupSuccess(result.body)))\n    .catch(err => {\n      if (err.status === 400) {\n        dispatch(userSignupFailed(err.response.body.message));\n      } else {\n        console.error(err);\n      }\n    });\n"]},"metadata":{},"sourceType":"module"}